<svg display="none">
  <symbol id="arrow">
    <!-- Arrow initially pointing left -->
    <polyline points="10 7, 15 12, 10 17" fill="none" stroke="currentcolor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" />
  </symbol>
</svg>

<div class="[ inner-wrapper ] [ sf-flow ]">
  <!-- Heading with same padding as the timeline -->
  <h2 class="[ pad-top-700 gap-bottom-900 ]">Career Journey</h2>

  <div class="[ timeline ] [ pad-top-700 gap-bottom-900 ]">
    {% for item in timelineItems %}
      <div class="timeline-item">
        <div class="timeline-item-header">
          <!-- Collapsible Arrow Button -->
          <button class="timeline-arrow" type="button" id="item{{ loop.index }}" aria-expanded="false" aria-controls="item{{ loop.index }}-body" aria-haspopup="true" data-item="{{ loop.index }}">
            <svg class="timeline-arrow-icon" viewBox="0 0 24 24" width="24px" height="24px" style="transform: rotate(0deg); transition: transform 0.3s ease;">
              <use href="#arrow" />
            </svg>
          </button>

          <span class="timeline-dot"></span>
          <span id="item{{ loop.index }}-name" class="timeline-meta">
            <time class="timeline-date" datetime="{{ item.date | myDateFilter }}">{{ item.date | myDateFilterds }}</time><br>
            <strong class="timeline-title">{{ item.data.title }}</strong>
          </span>
        </div>

        <div class="timeline-item-body" id="item{{ loop.index }}-body" role="region" aria-labelledby="item{{ loop.index }}" aria-hidden="true">
          <div class="timeline-item-body-content">
            {{ item.data.content | safe }}
          </div>
        </div>
      </div>
    {% endfor %}
  </div>
</div>

<script>
  // JavaScript to handle collapsing behavior
  document.addEventListener('DOMContentLoaded', function() {
    const timelineArrows = document.querySelectorAll('.timeline-arrow');
    
    timelineArrows.forEach(arrow => {
      arrow.addEventListener('click', function() {
        const itemIndex = this.getAttribute('data-item');
        const itemBody = document.getElementById(`item${itemIndex}-body`);
        const isExpanded = this.getAttribute('aria-expanded') === 'true';

        // Toggle visibility of the item body and update aria-expanded
        itemBody.setAttribute('aria-hidden', isExpanded);
        this.setAttribute('aria-expanded', !isExpanded);
        
        // Rotate the arrow (0deg = left, 90deg = down)
        const arrowIcon = this.querySelector('.timeline-arrow-icon');
        arrowIcon.style.transform = isExpanded ? 'rotate(0deg)' : 'rotate(90deg)';
      });
    });
  });
</script>
